'use strict';

var _jestEnvironmentNode = require('jest-environment-node');

var _jestEnvironmentNode2 = _interopRequireDefault(_jestEnvironmentNode);

var _seleniumWebdriver = require('selenium-webdriver');

var _seleniumWebdriver2 = _interopRequireDefault(_seleniumWebdriver);

var _proxy = require('selenium-webdriver/proxy');

var _proxy2 = _interopRequireDefault(_proxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class WebdriverEnvironment extends _jestEnvironmentNode2.default {
  constructor(config) {
    super(config);
    this.configuration = Object.assign({
      capabilities: {
        browserName: 'chrome'
      }
    }, config.testEnvironmentOptions);
    this.global.webdriver = _seleniumWebdriver2.default;
    this.global.By = _seleniumWebdriver2.default.By;
    this.global.until = _seleniumWebdriver2.default.until;
    this.global.configuration = this.configuration;
    this.global.cleanup = async () => {
      await this.global.driver.quit();
      this.global.driver = await buildDriver(this.configuration);
    };
  }

  async setup() {
    await super.setup();
    this.global.driver = await buildDriver(this.configuration);
  }

  async teardown() {
    if (this.global.driver) {
      await this.global.driver.quit();
    }
    await super.teardown();
  }

  runScript(script) {
    return super.runScript(script);
  }
}

async function buildDriver(configuration) {
  const driver = new _seleniumWebdriver2.default.Builder().withCapabilities(configuration.capabilities);

  if (configuration.server) driver.usingServer(configuration.server);
  if (configuration.proxyType) {
    let prxy;
    if (configuration.proxyType === 'socks') {
      prxy = _proxy2.default.socks(configuration.proxyOptions.socksProxy, configuration.proxyOptions.socksVersion);
    } else {
      prxy = _proxy2.default[configuration.proxyType](configuration.proxyOptions);
    }
    driver.setProxy(prxy);
  }

  return driver.build();
}

module.exports = WebdriverEnvironment;